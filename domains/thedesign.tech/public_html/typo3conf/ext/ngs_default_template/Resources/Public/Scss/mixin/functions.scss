/*----------------Functions-----------------*/

//use this mixins for responsive media types

@mixin desktopLargest {
  @media (max-width: #{$mediaDesktopLargest}) {
    @content;
  }
}

@mixin desktopLarge {
  @media (max-width: #{$mediaDesktopLarge}) {
    @content;
  }
}

@mixin desktop {
  @media (max-width: #{$mediaDesktop}) {
    @content;
  }
}

@mixin tablet {
  @media (max-width: #{$mediaTablet}) {
    @content;
  }
}

@mixin mobile {
  @media (max-width: #{$mediaMobile}) {
    @content;
  }
}

@mixin mobileSmall {
  @media (max-width: #{$mediaMobileSmall}) {
    @content;
  }
}


@function glob-map-deep-get($map, $keys...) {
  @each $key in $keys {
    @if map-has-key($map, $key) {
      $map: map-get($map, $key);
    }
    @else {
      @return null;
    }
  }
  @return $map;
}

@function glob-is-number($value) {
  @return type-of($value) == 'number';
}

@function glob-pr($width, $maxwidth) {
  @if glob-is-number($width) and glob-is-number($maxwidth) {
    @return ((100*$width)/$maxwidth) + 0%;
  }
}

@function glob-em($fontSize, $prevFontSize) {
  @if glob-is-number($fontSize) and glob-is-number($prevFontSize) {
    @return ($fontSize/$prevFontSize) + 'em';
  }
}

/*--------------------------------*/
/*        Headlines elements      */
/*--------------------------------*/

@mixin glob-map-get-headlines($key) {
  @each $prop, $value in glob-map-deep-get($headings, $key) {
    #{$prop}: $value;
  }

  /*   1900px   */
  @include desktopLarge {
    @each $prop, $value in glob-map-deep-get($headingsDesktopLarge, $key) {
      #{$prop}: $value;
    }
  }

  /*   1280px   */
  @include desktop {
    @each $prop, $value in glob-map-deep-get($headingsDesktopMin, $key) {
      #{$prop}: $value;
    }
  }

  /*        max-width: 767px        */
  @include mobile {
    @each $prop, $value in glob-map-deep-get($headingsTablet, $key) {
      #{$prop}: $value;
    }
  }

  /*   360px   */
  @include mobileSmall {
    @each $prop, $value in glob-map-deep-get($headingsMobile, $key) {
      #{$prop}: $value;
    }
  }
}

@mixin glob-map-get-headlines-desktop($key) {
  @each $prop, $value in glob-map-deep-get($headings, $key) {
    #{$prop}: $value;
  }
}

@mixin glob-map-get-headlines-tablet($key) {
  @each $prop, $value in glob-map-deep-get($headingsTablet, $key) {
    #{$prop}: $value;
  }
}

@mixin glob-map-get-headlines-mobile($key) {
  @each $prop, $value in glob-map-deep-get($headingsMobile, $key) {
    #{$prop}: $value;
  }
}


/*--------------------------------*/
/*          Text elements         */
/*--------------------------------*/

@mixin glob-map-get-text($key) {
  @if $key == default {
    @each $prop, $value in $default {
      #{$prop}: $value;
    }
  } @else if $key == large1 {
    @each $prop, $value in $large {
      #{$prop}: $value;
    }
  } @else if $key == medium1 {
    @each $prop, $value in $medium {
      #{$prop}: $value;
    }
  } @else if $key == small {
    @each $prop, $value in $small {
      #{$prop}: $value;
    }
  } @else if $key == extrasmall {
    @each $prop, $value in $extrasmall {
      #{$prop}: $value;
    }
  }

  /*   1900px   */
  @include desktopLarge {
    @if $key == default {
      @each $prop, $value in glob-map-deep-get($fontSizesDesctop, "default") {
        #{$prop}: $value;
      }
    } @else if $key == large1 {
      @each $prop, $value in glob-map-deep-get($fontSizesDesctop, "large1") {
        #{$prop}: $value;
      }
    } @else if $key == medium1 {
      @each $prop, $value in glob-map-deep-get($fontSizesDesctop, "medium1") {
        #{$prop}: $value;
      }
    } @else if $key == small {
      @each $prop, $value in glob-map-deep-get($fontSizesDesctop, "small") {
        #{$prop}: $value;
      }
    } @else if $key == extrasmall {
      @each $prop, $value in glob-map-deep-get($fontSizesDesctop, "extrasmall") {
        #{$prop}: $value;
      }
    }
  }

  /*   1280px   */
  @include desktop {
    @if $key == default {
      @each $prop, $value in glob-map-deep-get($fontSizesDesctopMin, "default") {
        #{$prop}: $value;
      }
    } @else if $key == large1 {
      @each $prop, $value in glob-map-deep-get($fontSizesDesctopMin, "large1") {
        #{$prop}: $value;
      }
    } @else if $key == medium1 {
      @each $prop, $value in glob-map-deep-get($fontSizesDesctopMin, "medium1") {
        #{$prop}: $value;
      }
    } @else if $key == small {
      @each $prop, $value in glob-map-deep-get($fontSizesDesctopMin, "small") {
        #{$prop}: $value;
      }
    } @else if $key == extrasmall {
      @each $prop, $value in glob-map-deep-get($fontSizesDesctopMin, "extrasmall") {
        #{$prop}: $value;
      }
    }
  }

  /*        max-width: 767px        */
  @include mobile {
    @if $key == default {
      @each $prop, $value in glob-map-deep-get($fontSizesTablet, "default") {
        #{$prop}: $value;
      }
    } @else if $key == large1 {
      @each $prop, $value in glob-map-deep-get($fontSizesTablet, "large1") {
        #{$prop}: $value;
      }
    } @else if $key == medium1 {
      @each $prop, $value in glob-map-deep-get($fontSizesTablet, "medium1") {
        #{$prop}: $value;
      }
    } @else if $key == small {
      @each $prop, $value in glob-map-deep-get($fontSizesTablet, "small") {
        #{$prop}: $value;
      }
    } @else if $key == extrasmall {
      @each $prop, $value in glob-map-deep-get($fontSizesTablet, "extrasmall") {
        #{$prop}: $value;
      }
    }
  }

  /*   360px   */
  @include mobileSmall {
    @if $key == default {
      @each $prop, $value in glob-map-deep-get($fontSizesMobile, "default") {
        #{$prop}: $value;
      }
    } @else if $key == large1 {
      @each $prop, $value in glob-map-deep-get($fontSizesMobile, "large1") {
        #{$prop}: $value;
      }
    } @else if $key == medium1 {
      @each $prop, $value in glob-map-deep-get($fontSizesMobile, "medium1") {
        #{$prop}: $value;
      }
    } @else if $key == small {
      @each $prop, $value in glob-map-deep-get($fontSizesMobile, "small") {
        #{$prop}: $value;
      }
    } @else if $key == extrasmall {
      @each $prop, $value in glob-map-deep-get($fontSizesMobile, "extrasmall") {
        #{$prop}: $value;
      }
    }
  }
}

@mixin glob-map-get-text-desktop($key) {
  @if $key == default {
    @each $prop, $value in $default {
      #{$prop}: $value;
    }
  } @else if $key == large1 {
    @each $prop, $value in $large {
      #{$prop}: $value;
    }
  } @else if $key == medium1 {
    @each $prop, $value in $medium {
      #{$prop}: $value;
    }
  } @else if $key == small {
    @each $prop, $value in $small {
      #{$prop}: $value;
    }
  } @else if $key == extrasmall {
    @each $prop, $value in $extrasmall {
      #{$prop}: $value;
    }
  }
}

@mixin glob-map-get-text-tablet($key) {
  @if $key == default {
    @each $prop, $value in glob-map-deep-get($fontSizesTablet, "default") {
      #{$prop}: $value;
    }
  } @else if $key == large1 {
    @each $prop, $value in glob-map-deep-get($fontSizesTablet, "large1") {
      #{$prop}: $value;
    }
  } @else if $key == medium1 {
    @each $prop, $value in glob-map-deep-get($fontSizesTablet, "medium1") {
      #{$prop}: $value;
    }
  } @else if $key == small {
    @each $prop, $value in glob-map-deep-get($fontSizesTablet, "small") {
      #{$prop}: $value;
    }
  } @else if $key == extrasmall {
    @each $prop, $value in glob-map-deep-get($fontSizesTablet, "extrasmall") {
      #{$prop}: $value;
    }
  }
}

@mixin glob-map-get-text-mobile($key) {
  @if $key == default {
    @each $prop, $value in glob-map-deep-get($fontSizesMobile, "default") {
      #{$prop}: $value;
    }
  } @else if $key == large1 {
    @each $prop, $value in glob-map-deep-get($fontSizesMobile, "large1") {
      #{$prop}: $value;
    }
  } @else if $key == medium1 {
    @each $prop, $value in glob-map-deep-get($fontSizesMobile, "medium1") {
      #{$prop}: $value;
    }
  } @else if $key == small {
    @each $prop, $value in glob-map-deep-get($fontSizesMobile, "small") {
      #{$prop}: $value;
    }
  } @else if $key == extrasmall {
    @each $prop, $value in glob-map-deep-get($fontSizesMobile, "extrasmall") {
      #{$prop}: $value;
    }
  }
}

/*--------------------------------*/
/*            More link           */
/*--------------------------------*/

@mixin glob-map-get-moreLink() {
  @each $prop, $value in $morelink {
    #{$prop}: $value;
  }

  /*   1900px   */
  @include desktopLarge {
    @each $prop, $value in $morelinkDescLarge {
      #{$prop}: $value;
    }
  }

  /*   1280px   */
  @include desktop {
    @each $prop, $value in $morelinkDescMin {
      #{$prop}: $value;
    }
  }

  /*        max-width: 767px        */
  @include mobile {
    @each $prop, $value in $morelinkTablet {
      #{$prop}: $value;
    }
  }

  /*   360px   */
  @include mobileSmall {
    @each $prop, $value in $morelinkMobile {
      #{$prop}: $value;
    }
  }
}

@mixin glob-map-get-link() {
  @each $prop, $value in $link {
    #{$prop}: $value;
  }

  /*   1900px   */
  @include desktopLarge {
    @each $prop, $value in $linkDescLarge {
      #{$prop}: $value;
    }
  }

  /*   1280px   */
  @include desktop {
    @each $prop, $value in $linkDescMin {
      #{$prop}: $value;
    }
  }

  /*        max-width: 767px        */
  @include mobile {
    @each $prop, $value in $linkTablet {
      #{$prop}: $value;
    }
  }

  /*   360px   */
  @include mobileSmall {
    @each $prop, $value in $linkMobile {
      #{$prop}: $value;
    }
  }
}


/*--------------------------------*/
/*          Section Color         */
/*--------------------------------*/

/*----------change all colors to bgweb---------*/

@mixin glob-map-get-sectionColorsBgWeb() {
  @each $prop, $value in map-get($bgweb, "colors") {
    #{$prop}: $value;
  }

  @each $class, $properties in map-get($bgweb, "title") {
    @if $class == "default" {
      .#{$bgweb}, .#{$bgweb} a:not(.btn) {
        @each $prop, $value in $properties {
          #{$prop}: $value;
        }
      }
    } @else {
      .#{$class}, .#{$class} a:not(.btn) {
        @each $prop, $value in $properties {
          #{$prop}: $value;
        }
      }
    }
  }
}


/*----------change all colors to key bg---------*/

@mixin glob-map-get-sectionColors($key) {
  $bgtype: false;

  @if $key == bgweb {
    $bgtype: $bgweb;
  } @else {
    @if glob-map-deep-get($bgColors, "#{$key}") {
      $bgtype: glob-map-deep-get($bgColors, "#{$key}");
    }
  }

  @if $bgtype {
    @each $prop, $value in glob-map-deep-get($bgtype, "colors") {
      #{$prop}: $value;
    }

    .default, .default a:not(.btn),
    .defaultSpec, .defaultSpec a:not(.btn),
    .small, .small a:not(.btn),
    .smallLg, .smallLg a:not(.btn),
    .smallSm, .smallSm a:not(.btn),
    .large1, .large1 a:not(.btn),
    .medium1, .medium1 a:not(.btn),
    .extrasmall, .extrasmall a:not(.btn) {
      @each $prop, $value in glob-map-deep-get($bgtype, "title", "default") {
        #{$prop}: $value;
      }
    }

    .link {
      @each $prop, $value in glob-map-deep-get($bgtype, "link", "default") {
        #{$prop}: $value;
      }
    }
    .link:hover,
    .link:not(:disabled):not(.disabled):active,
    .link:not(:disabled):not(.disabled):focus,
    .link:focus,
    .link:focus-within {
      @each $prop, $value in glob-map-deep-get($bgtype, "link", "hover") {
        #{$prop}: $value;
      }
    }

    .morelink {
      @each $prop, $value in glob-map-deep-get($bgtype, "morelink", "default") {
        #{$prop}: $value;
      }
    }
    .morelink:hover {
      @each $prop, $value in glob-map-deep-get($bgtype, "morelink", "hover") {
        #{$prop}: $value;
      }
    }

    .t1large, .t1large a:not(.btn) {
      @each $prop, $value in glob-map-deep-get($bgtype, "title", "t1large") {
        #{$prop}: $value;
      }
    }
    .t1, .t1 a:not(.btn), h1, h1 a:not(.btn) {
      @each $prop, $value in glob-map-deep-get($bgtype, "title", "t1") {
        #{$prop}: $value;
      }
    }
    .t2, .t2 a:not(.btn), h2, h2 a:not(.btn) {
      @each $prop, $value in glob-map-deep-get($bgtype, "title", "t2") {
        #{$prop}: $value;
      }
    }
    .t3, .t3 a:not(.btn), h3, h3 a:not(.btn) {
      @each $prop, $value in glob-map-deep-get($bgtype, "title", "t3") {
        #{$prop}: $value;
      }
    }
    .t4, .t4 a:not(.btn), h4, h4 a:not(.btn) {
      @each $prop, $value in glob-map-deep-get($bgtype, "title", "t4") {
        #{$prop}: $value;
      }
    }
    .t4-inverse, .t4-inverse a:not(.btn) {
      @each $prop, $value in glob-map-deep-get($bgtype, "title", "t4") {
        #{$prop}: $value;
      }
    }
    .t5, .t5 a:not(.btn), h5, h5 a:not(.btn) {
      @each $prop, $value in glob-map-deep-get($bgtype, "title", "t5-inverse") {
        #{$prop}: $value;
      }
    }
    .t5-inverse, .t5-inverse a:not(.btn) {
      @each $prop, $value in glob-map-deep-get($bgtype, "title", "t5-inverse") {
        #{$prop}: $value;
      }
    }
    .t6, .t6 a:not(.btn), h6, h6 a:not(.btn) {
      @each $prop, $value in glob-map-deep-get($bgtype, "title", "t6") {
        #{$prop}: $value;
      }
    }
    .t6-inverse, .t6-inverse a:not(.btn) {
      @each $prop, $value in glob-map-deep-get($bgtype, "title", "t6") {
        #{$prop}: $value;
      }
    }

    @if glob-map-deep-get($bgColors, "#{$key}", "buttons") {
      @each $btnClass, $btnProperties in glob-map-deep-get($bgtype, "buttons") {
        .#{$btnClass} {
          @each $prop, $value in glob-map-deep-get($bgtype, "buttons", "#{$btnClass}", "default") {
            #{$prop}: $value;
          }
        }
        .#{$btnClass}:not(:disabled):not(.disabled):hover, .#{$btnClass}:not(:disabled):not(.disabled):active, .#{$btnClass}:not(:disabled):not(.disabled):focus, .#{$btnClass}:focus-within {
          @each $prop, $value in glob-map-deep-get($bgtype, "buttons", "#{$btnClass}", "hover") {
            #{$prop}: $value;
          }
        }
      }
    }

    @if glob-map-deep-get($bgtype, "colors", "color") {
      svg.icon {
        fill: glob-map-deep-get($bgtype, "colors", "color");
        color: glob-map-deep-get($bgtype, "colors", "color");
      }
    }

    @if glob-map-deep-get($bgtype, "scrollbar") {
      * {
        scrollbar-width: thin;
        scrollbar-color: glob-map-deep-get($bgtype, "scrollbar", "scrollbar-inner-color");

        &::-webkit-scrollbar {
          width: glob-map-deep-get($bgtype, "scrollbar", "scrollbar-width");
          height: glob-map-deep-get($bgtype, "scrollbar", "scrollbar-width");
        }

        &::-webkit-scrollbar-track {
          background: glob-map-deep-get($bgtype, "scrollbar", "scrollbar-color");
        }

        &::-webkit-scrollbar-thumb {
          background: glob-map-deep-get($bgtype, "scrollbar", "scrollbar-inner-color");
        }
      }
    }

    /*---------------------------------------------*/
    /*---------bgInverce including in bgWeb--------*/
    /*---------------------------------------------*/

    @if glob-map-deep-get($bgtype, "inverce") {

      @media screen and (min-width: $mediaDesktopLarge-) {
        @each $class, $properties in map-get($bgwebInverse, "fontSizes") {
          .#{$class}, .#{$class} a:not(.btn) {
            @each $prop, $value in $properties {
              #{$prop}: $value;
            }
          }
        }

        @each $class, $properties in map-get($bgwebInverse, "title") {
          .#{$class}, .#{$class} a:not(.btn) {
            @each $prop, $value in $properties {
              #{$prop}: $value;
            }
          }
        }
      }

      /*   1900px   */
      @include desktopLarge {

        @media screen and (min-width: $mediaDesktop-) {
          @each $class, $properties in map-get($bgwebInverseDesctop, "fontSizes") {
            .#{$class}, .#{$class} a:not(.btn) {
              @each $prop, $value in $properties {
                #{$prop}: $value;
              }
            }
          }

          @each $class, $properties in map-get($bgwebInverseDesctop, "title") {
            .#{$class}, .#{$class} a:not(.btn) {
              @each $prop, $value in $properties {
                #{$prop}: $value;
              }
            }
          }
        }
      }

      /*   1280px   */
      @include desktop {

        @media screen and (min-width: $mediaMobile-) {
          @each $class, $properties in map-get($bgwebInverseDesctopMin, "fontSizes") {
            .#{$class}, .#{$class} a:not(.btn) {
              @each $prop, $value in $properties {
                #{$prop}: $value;
              }
            }
          }

          @each $class, $properties in map-get($bgwebInverseDesctopMin, "title") {
            .#{$class}, .#{$class} a:not(.btn) {
              @each $prop, $value in $properties {
                #{$prop}: $value;
              }
            }
          }
        }
      }

      /*        max-width: 767px        */
      @include mobile {
        @media screen and (min-width: $mediaMobileSmall-) {
          @each $class, $properties in map-get($bgwebInverseTablet, "fontSizes") {
            .#{$class}, .#{$class} a:not(.btn) {
              @each $prop, $value in $properties {
                #{$prop}: $value;
              }
            }
          }

          @each $class, $properties in map-get($bgwebInverseTablet, "title") {
            .#{$class}, .#{$class} a:not(.btn) {
              @each $prop, $value in $properties {
                #{$prop}: $value;
              }
            }
          }
        }
      }

      /*   360px   */
      @include mobileSmall {
        @each $class, $properties in map-get($bgwebInverseMobile, "fontSizes") {
          .#{$class}, .#{$class} a:not(.btn) {
            @each $prop, $value in $properties {
              #{$prop}: $value;
            }
          }
        }
        @each $class, $properties in map-get($bgwebInverseMobile, "title") {
          .#{$class}, .#{$class} a:not(.btn) {
            @each $prop, $value in $properties {
              #{$prop}: $value;
            }
          }
        }
      }
    }
  }
}


/*--------------------------------*/
/*         Scrollbar hide         */
/*--------------------------------*/


@mixin glob-hide-scrollbar() {
  -ms-overflow-style: none; // IE and Edge /
  scrollbar-width: none; // Firefox /

  &::-webkit-scrollbar {
    display: none;
  }
}

/*--------------------------------*/
/*      Dots in current line      */
/*--------------------------------*/

@mixin glob-dots-in-current-line($key) {
  -webkit-box-orient: vertical;
  -webkit-line-clamp: $key;
  line-clamp: $key;
  display: -webkit-box;
}


/*--------------------------------*/
/*          Column count          */
/*--------------------------------*/

@mixin glob-column-count($key) {
  -moz-column-count: $key;
  column-count: $key;
}


/*--------------------------------*/
/*        Fluid Responceive       */
/*--------------------------------*/


@mixin glob-map-get-fluid($property, $xl-size, $l-size, $m-size, $s-size) {
  #{$property}: #{$xl-size}px;

  /*   1900px   */
  @include desktopLarge {
    @if $xl-size != $l-size {
      #{$property}: globFluidSizeValueDeskDescMin($xl-size, $l-size);
    } @else {
      #{$property}: #{$xl-size}px;
    }
  }

  /*   1200px   */
  @include desktop {
    @if $l-size != $m-size {
      #{$property}: globFluidSizeValueDeskTab($l-size, $m-size);
    } @else {
      #{$property}: #{$l-size}px;
    }
  }

  /*        max-width: 767px        */
  @include mobile {
    @if $m-size != $s-size {
      #{$property}: globFluidSizeValueTabMob($m-size, $s-size);
    } @else {
      #{$property}: #{$m-size}px;
    }
  }

  @if $m-size != $s-size {

    /*   360px   */
    @include mobileSmall {
      #{$property}: #{$s-size}px;
    }
  }
}

/*---------------------*/

@function glob-fluid-size($max, $min) {
  @return calc(#{$min}px + (#{$max} - #{$min}) * ((100vw - #{$minVP}px) / (#{$maxVP} - #{$minVP})));
}

@function glob-fluid-size-full($max, $min, $maxcustomVP, $mincustomVP) {
  @return calc(#{$min}px + (#{$max} - #{$min}) * ((100vw - #{$mincustomVP}px) / (#{$maxcustomVP} - #{$mincustomVP})));
}

// calculates the size for each Device
@mixin globFluidSize($prop, $max, $min, $maxVP, $minVP) {
  #{$prop}: calc(#{$min}px + (#{$max} - #{$min}) * ((100vw - #{$minVP}px) / (#{$maxVP} - #{$minVP})));
}